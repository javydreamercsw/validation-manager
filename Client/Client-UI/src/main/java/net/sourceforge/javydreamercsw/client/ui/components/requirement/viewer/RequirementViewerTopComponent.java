package net.sourceforge.javydreamercsw.client.ui.components.requirement.viewer;

import com.validation.manager.core.DataBaseManager;
import com.validation.manager.core.db.Project;
import com.validation.manager.core.db.Requirement;
import com.validation.manager.core.db.RequirementStatus;
import com.validation.manager.core.db.controller.RequirementStatusJpaController;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.IntrospectionException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import net.sourceforge.javydreamercsw.client.ui.components.RequirementStatusFilterChangeListener;
import net.sourceforge.javydreamercsw.client.ui.components.RequirementStatusFilterChangeProvider;
import net.sourceforge.javydreamercsw.client.ui.components.requirement.viewer.scene.HierarchyScene;
import net.sourceforge.javydreamercsw.client.ui.nodes.ProjectNode;
import net.sourceforge.javydreamercsw.client.ui.nodes.SubProjectChildFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.ServiceProvider;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//net.sourceforge.javydreamercsw.client.ui.components.project//RequirementViewer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "RequirementViewerTopComponent",
        iconBase = "net/sourceforge/javydreamercsw/client/ui/VSmall.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_RequirementViewerAction",
        preferredID = "RequirementViewerTopComponent"
)
@Messages({
    "CTL_RequirementViewerAction=Requirement Viewer",
    "CTL_RequirementViewerTopComponent=Requirement Viewer",
    "HINT_RequirementViewerTopComponent=This is a Requirement Viewer window",
    "RequirementViewerTopComponent.filterPane.border.title=Requirement Filters"
})
@ServiceProvider(service = RequirementStatusFilterChangeProvider.class)
public final class RequirementViewerTopComponent extends TopComponent
        implements ExplorerManager.Provider, LookupListener, ItemListener,
        RequirementStatusFilterChangeProvider {

    private static final long serialVersionUID = -4351258629805876065L;

    private final ExplorerManager em = new ExplorerManager();
    private Lookup.Result<Project> result = null;
    private Lookup.Result<Requirement> result2 = null;
    private final HierarchyScene scene;
    private final JComponent myView;
    private Node root = null;
    private static final ResourceBundle rb
            = ResourceBundle.getBundle("com.validation.manager.resources.VMMessages");
    private static final Logger LOG
            = Logger.getLogger(RequirementViewerTopComponent.class.getSimpleName());
    private final List<JCheckBox> filters = new ArrayList<>();
    private final List<RequirementStatusFilterChangeListener> listeners
            = new ArrayList<>();

    public RequirementViewerTopComponent() {
        initComponents();
        setName(Bundle.CTL_RequirementViewerTopComponent());
        setToolTipText(Bundle.HINT_RequirementViewerTopComponent());
        scene = new HierarchyScene();
        myView = scene.createView();
        hierarchyPane.setViewportView(myView);
        associateLookup(ExplorerUtils.createLookup(getExplorerManager(),
                getActionMap()));
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        filterPane = new javax.swing.JPanel();
        hierarchyPane = new BeanTreeView();

        jSplitPane2.setDividerLocation(80);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        filterPane.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RequirementViewerTopComponent.class, "RequirementViewerTopComponent.filterPane.border.title"))); // NOI18N
        filterPane.setName(""); // NOI18N
        filterPane.setLayout(new java.awt.GridLayout(0, 6, 2, 1));
        jScrollPane1.setViewportView(filterPane);

        jSplitPane2.setTopComponent(jScrollPane1);
        jSplitPane2.setRightComponent(hierarchyPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel filterPane;
    private javax.swing.JScrollPane hierarchyPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane2;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(Project.class);
        result.allItems();
        result.addLookupListener(this);
        result2 = Utilities.actionsGlobalContext().lookupResult(Requirement.class);
        result2.allItems();
        result2.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
        result2.removeLookupListener(this);
        result2 = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result res = (Lookup.Result) le.getSource();
        Collection instances = res.allInstances();
        if (!instances.isEmpty()) {
            Iterator it = instances.iterator();
            while (it.hasNext()) {
                Object item = it.next();
                if (item instanceof Project) {
                    try {
                        Project p = (Project) item;
                        root = new ProjectNode(p, new SubProjectChildFactory(p));
                        root.setDisplayName(p.getName());
                        getExplorerManager().setRootContext(root);
                        if (filters.isEmpty()) {
                            //Update the available filters if they are not there already. No need to reprocess each time.
                            filterPane.removeAll();
                            for (RequirementStatus rs : new RequirementStatusJpaController(
                                    DataBaseManager.getEntityManagerFactory()).findRequirementStatusEntities()) {
                                JCheckBox filter = new JCheckBox(rb.containsKey(rs.getStatus())
                                        ? rb.getString(rs.getStatus()) : rs.getStatus());
                                filter.addItemListener((RequirementViewerTopComponent) this);
                                //TODO: Remove when filter is working.
                                filter.setEnabled(false);
                                filters.add(filter);
                                filterPane.add(filter);
                            }
                        }
                        filterPane.repaint();
                    } catch (IntrospectionException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                } else if (item instanceof Requirement) {
                    Requirement req = (Requirement) item;
                    scene.clear();
                    LOG.fine(req.getUniqueId());
                    scene.addRequirement(req);
                }
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        LOG.log(Level.INFO, "Clicked: {0}",
                ((JCheckBox) e.getSource()).getText());
        List<Integer> ids = new ArrayList<>();
        for (JCheckBox cb : filters) {
            if (cb.isSelected()) {
                String sourceText = cb.getText();
                String toMatch;
                if (sourceText.equals(rb.getString("general.approved"))) {
                    toMatch = "general.approved";
                } else if (sourceText.equals(rb.getString("general.obsolete"))) {
                    toMatch = "general.obsolete";
                } else if (sourceText.equals(rb.getString("general.rejected"))) {
                    toMatch = "general.rejected";
                } else if (sourceText.equals(rb.getString("general.open"))) {
                    toMatch = "general.open";
                } else {
                    //Not translated (i.e. custom)
                    toMatch = sourceText;
                }
                RequirementStatus status = null;
                for (RequirementStatus rs : new RequirementStatusJpaController(
                        DataBaseManager.getEntityManagerFactory()).findRequirementStatusEntities()) {
                    if (rs.getStatus().equals(toMatch)) {
                        status = rs;
                        break;
                    }
                }
                if (status != null) {
                    ids.add(status.getId());
                }
            }
        }
        for (RequirementStatusFilterChangeListener sfcl : listeners) {
            sfcl.filterChange(ids.toArray(new Integer[0]));
            LOG.log(Level.FINE, "Sending event to: {0}",
                    sfcl.getClass().getSimpleName());
        }
    }

    @Override
    public void register(RequirementStatusFilterChangeListener listener) {
        if (!listeners.contains(listener)) {
            listeners.add(listener);
        }
    }

    @Override
    public void unregister(RequirementStatusFilterChangeListener listener) {
        if (listeners.contains(listener)) {
            listeners.remove(listener);
        }
    }
}
