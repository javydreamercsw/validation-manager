package net.sourceforge.javydreamercsw.client.ui.components.project;

import com.validation.manager.core.db.Project;
import com.validation.manager.core.db.Requirement;
import com.validation.manager.core.db.RequirementSpec;
import com.validation.manager.core.db.RequirementSpecNode;
import com.validation.manager.core.server.core.ProjectServer;
import com.validation.manager.core.server.core.RequirementServer;
import java.awt.event.ActionEvent;
import java.util.Collection;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//net.sourceforge.javydreamercsw.client.ui.components.project//ProjectViewer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ProjectViewerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)//Disabled for now
@ActionID(category = "Window", id = "net.sourceforge.javydreamercsw.client.ui.components.project.ProjectViewerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ProjectViewerAction",
        preferredID = "ProjectViewerTopComponent"
)
@Messages({
    "CTL_ProjectViewerAction=Project Viewer",
    "CTL_ProjectViewerTopComponent=Project Viewer Window",
    "HINT_ProjectViewerTopComponent=This is a Project Viewer window"
})
public final class ProjectViewerTopComponent extends TopComponent
        implements LookupListener {

    private Object[][] table = null;
    private Lookup.Result<Project> result = null;
    private static final Logger LOG
            = Logger.getLogger(ProjectViewerTopComponent.class.getSimpleName());
    private Project current;

    public ProjectViewerTopComponent() {
        initComponents();
        setName(Bundle.CTL_ProjectViewerTopComponent());
        setToolTipText(Bundle.HINT_ProjectViewerTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        statTable = new javax.swing.JTable();
        statTable.setModel(new javax.swing.table.DefaultTableModel(
            table,
            new String[]{
                "Stat", "Amount"
            }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean[]{
                false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        jScrollPane1.setViewportView(statTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable statTable;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(Project.class);
        result.allItems();
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result res = (Lookup.Result) le.getSource();
        Collection instances = res.allInstances();
        if (!instances.isEmpty()) {
            Iterator it = instances.iterator();
            while (it.hasNext()) {
                Object item = it.next();
                if (item instanceof Project) {
                    Project p = (Project) item;
                    current = p;
                    if (current != null) {
                        new ProjectStatsCalculatorAction().actionPerformed(null);
                    }
                }
            }
        }
    }

    public class ProjectStatsCalculatorAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            LOG.log(Level.INFO, "Updating stats for: {0}", current.getName());
            ProjectServer project = new ProjectServer(current);
            int total = 0;
            int coverage = 0;
            for (RequirementSpec rs : project.getRequirementSpecList()) {
                for (RequirementSpecNode rsn : rs.getRequirementSpecNodeList()) {
                    for (Requirement r : rsn.getRequirementList()) {
                        coverage += new RequirementServer(r).getTestCoverage();
                        total++;
                    }
                }
            }
            table = new Object[][]{{"Total Requirements",
                "Coverage"},
            {total, (coverage / total)}};
            statTable.setModel(new javax.swing.table.DefaultTableModel(
                    table,
                    new String[]{
                        "Stat", "Amount"
                    }
            ) {
                Class[] types = new Class[]{
                    java.lang.String.class, java.lang.Integer.class
                };
                boolean[] canEdit = new boolean[]{
                    false, false
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        }
    }
}
