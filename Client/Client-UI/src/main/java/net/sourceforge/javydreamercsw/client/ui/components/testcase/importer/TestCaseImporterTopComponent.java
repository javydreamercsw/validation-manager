package net.sourceforge.javydreamercsw.client.ui.components.testcase.importer;

import com.validation.manager.core.db.Project;
import com.validation.manager.core.db.Requirement;
import com.validation.manager.core.db.Test;
import com.validation.manager.core.db.TestCase;
import com.validation.manager.core.db.TestPlan;
import com.validation.manager.core.db.TestPlanHasTest;
import com.validation.manager.core.db.TestProject;
import com.validation.manager.core.db.controller.exceptions.NonexistentEntityException;
import com.validation.manager.core.server.core.ProjectServer;
import com.validation.manager.core.server.core.TestCaseServer;
import com.validation.manager.core.tool.table.extractor.TableExtractor;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import net.sourceforge.javydreamercsw.client.ui.components.AbstractImportTopComponent;
import net.sourceforge.javydreamercsw.client.ui.nodes.actions.EditTestCaseDialog;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//net.sourceforge.javydreamercsw.client.ui.components.testcase.importer//TestCaseImporter//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TestCaseImporterTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TestCaseImporterAction",
        preferredID = "TestCaseImporterTopComponent"
)
@Messages({
    "CTL_TestCaseImporterAction=TestCaseImporter",
    "CTL_TestCaseImporterTopComponent=TestCaseImporter Window",
    "HINT_TestCaseImporterTopComponent=This is a TestCaseImporter window",
    "TestCaseImporterTopComponent.jLabel1.text=Table:",
    "TestCaseImporterTopComponent.addDelimiterButton.text=Add Delimiter",
    "TestCaseImporterTopComponent.delimiterField.text=",
    "TestCaseImporterTopComponent.jLabel2.text=Requirement Delimiter",
    "TestCaseImporterTopComponent.saveButton.text=Save",
    "TestCaseImporterTopComponent.header.text=Data has Header?",
    "TestCaseImporterTopComponent.importButton.text=Import"
})
public class TestCaseImporterTopComponent extends AbstractImportTopComponent {

    private static final Logger LOG
            = Logger.getLogger(TestCaseImporterTopComponent.class.getSimpleName());
    protected Test test;
    protected TestCase tc;
    protected TestPlan tp;

    public TestCaseImporterTopComponent() {
        super();
        setName(Bundle.CTL_TestCaseImporterTopComponent());
        setToolTipText(Bundle.HINT_TestCaseImporterTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        spinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        importedTable = new javax.swing.JTable();
        importButton = new javax.swing.JButton();
        header = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();
        delimiter = new JComboBox(getModel());
        jLabel2 = new javax.swing.JLabel();
        delimiterField = new javax.swing.JTextField();
        addDelimiterButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(TestCaseImporterTopComponent.class, "TestCaseImporterTopComponent.jLabel1.text")); // NOI18N

        spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        spinner.setEnabled(false);

        importedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(importedTable);

        org.openide.awt.Mnemonics.setLocalizedText(importButton, org.openide.util.NbBundle.getMessage(TestCaseImporterTopComponent.class, "TestCaseImporterTopComponent.importButton.text")); // NOI18N
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(header, org.openide.util.NbBundle.getMessage(TestCaseImporterTopComponent.class, "TestCaseImporterTopComponent.header.text")); // NOI18N
        header.setEnabled(false);
        header.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(saveButton, org.openide.util.NbBundle.getMessage(TestCaseImporterTopComponent.class, "TestCaseImporterTopComponent.saveButton.text")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        delimiter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ",", ";", " " }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(TestCaseImporterTopComponent.class, "TestCaseImporterTopComponent.jLabel2.text")); // NOI18N

        delimiterField.setText(org.openide.util.NbBundle.getMessage(TestCaseImporterTopComponent.class, "TestCaseImporterTopComponent.delimiterField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(addDelimiterButton, org.openide.util.NbBundle.getMessage(TestCaseImporterTopComponent.class, "TestCaseImporterTopComponent.addDelimiterButton.text")); // NOI18N
        addDelimiterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDelimiterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)
                        .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(header))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(importButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(addDelimiterButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delimiterField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(3, 3, 3)
                                    .addComponent(delimiter, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delimiterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDelimiterButton))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delimiter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(importButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(header))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JFileChooser fc = new JFileChooser();
                boolean valid = false;
                fc.setFileFilter(new FileFilter() {

                    @Override
                    public boolean accept(File f) {
                        return f.isDirectory()
                                || (f.isFile()
                                && (f.getName().endsWith(".xls")
                                || f.getName().endsWith(".xlsx")
                                || f.getName().endsWith(".xlsm")
                                || f.getName().endsWith(".doc")
                                || f.getName().endsWith(".docx")));
                    }

                    @Override
                    public String getDescription() {
                        return "Validation Manager Test Import Files";
                    }
                });
                int returnVal = fc.showOpenDialog(new JFrame());
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = fc.getSelectedFile();
                    TableExtractor te = new TableExtractor(file);
                    try {
                        tables.clear();
                        tables.addAll(te.extractTables());
                        if (tables.size() > 0) {
                            double max = Double.valueOf("" + tables.size());
                            spinner.setModel(new SpinnerNumberModel(1.0, 1.0,
                                    max, 1.0));
                            spinner.setValue(1.0);
                            LOG.log(Level.FINE, "Loaded {0} tables!",
                                    tables.size());
                            valid = true;
                            displayTable(1);
                        } else {
                            LOG.log(Level.FINE, "Found no tables!");
                        }
                        for (DefaultTableModel dtm : tables) {
                            int columns = dtm.getColumnCount();
                            Object[] mappingRow = new Object[columns];
                            for (int i = 0; i < columns; i++) {
                                //Mapping row
                                mappingRow[i] = "Select Mapping";
                            }
                            //Insert mapping row
                            dtm.insertRow(0, mappingRow);
                        }
                    } catch (FileNotFoundException ex) {
                        Exceptions.printStackTrace(ex);
                    } catch (ClassNotFoundException | IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
                enableUI(valid);
            }
        });
    }//GEN-LAST:event_importButtonActionPerformed

    private void headerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerActionPerformed
        displayTable((int) Math.round(Double.valueOf(spinner.getValue().toString())));
    }//GEN-LAST:event_headerActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        save();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void addDelimiterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDelimiterButtonActionPerformed
        getModel().addElement(delimiterField.getText().trim());
    }//GEN-LAST:event_addDelimiterButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDelimiterButton;
    private javax.swing.JComboBox delimiter;
    private javax.swing.JTextField delimiterField;
    private javax.swing.JCheckBox header;
    private javax.swing.JButton importButton;
    private javax.swing.JTable importedTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JSpinner spinner;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    /**
     * @param tp the TestPlan to set
     */
    public void setTestPlan(TestPlan tp) {
        this.tp = tp;
    }

    @Override
    public void componentClosed() {
        enableUI(false);
        tables.clear();
        tc = null;
        test = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void init() {
        initComponents();
    }

    @Override
    public DefaultCellEditor getEditor() {
        return new TestCaseImportEditor();
    }

    @Override
    public JTextField getDelimetterField() {
        return delimiterField;
    }

    @Override
    public JCheckBox getHeaderCheckbox() {
        return header;
    }

    @Override
    public JScrollPane getScrollPane() {
        return jScrollPane1;
    }

    @Override
    public void setImportTable(JTable table) {
        importedTable = table;
    }

    @Override
    public JTable getImportTable() {
        return importedTable;
    }

    @Override
    public JSpinner getSpinner() {
        return spinner;
    }

    @Override
    public JComboBox getDelimiter() {
        return delimiter;
    }

    @Override
    public void setModel(DefaultComboBoxModel model) {
        this.model = model;
    }

    @Override
    public DefaultComboBoxModel getModel() {
        return model;
    }

    @Override
    public JButton getSaveButton() {
        return saveButton;
    }

    public void setTest(Test test) {
        this.test = test;
    }

    protected void process(List<String> mapping) {
        List<Project> projects = new ArrayList<>();
        for (TestPlanHasTest tpht : test.getTestPlanHasTestList()) {
            tpht.getTestPlan().getTestProject();
            for (Project p : ProjectServer.getProjects()) {
                for (TestProject temp : p.getTestProjectList()) {
                    if (Objects.equals(temp.getId(),
                            tpht.getTestPlan().getTestProject().getId())) {
                        LOG.log(Level.FINE, "Project ID: {0}", p.getId());
                        projects.add(p);
                    }
                }
            }
        }
        TestCaseServer tcs = new TestCaseServer(tc);
        //We got the created test, now let's import the rest.
        //Start on second row as first one is the mapping row.
        //Start on third row if there are headers in the data
        int step_counter = 0;
        int start = 1 + (header.isSelected() ? 1 : 0);
        for (int row = start; row < importedTable.getModel().getRowCount(); row++) {
            List<Requirement> requirements = new ArrayList<>();
            String description = "", criteria = "", notes = "";
            for (int col = 0; col < importedTable.getModel().getColumnCount(); col++) {
                if (!mapping.get(col).equals(
                        TestCaseImportMapping.IGNORE.getValue())) {
                    //Column is to be imported
                    if (mapping.get(col).equals(
                            TestCaseImportMapping.DESCRIPTION.getValue())) {
                        description = (String) importedTable.getModel().getValueAt(row, col);
                        LOG.log(Level.FINE, "Description: {0}", description);
                    } else if (mapping.get(col).equals(
                            TestCaseImportMapping.NOTES.getValue())) {
                        notes = (String) importedTable.getModel().getValueAt(row, col);
                        LOG.log(Level.FINE, "Notes: {0}", notes);
                    } else if (mapping.get(col).equals(
                            TestCaseImportMapping.ACCEPTANCE_CRITERIA.getValue())) {
                        criteria = (String) importedTable.getModel().getValueAt(row, col);
                        LOG.log(Level.FINE, "Criteria: {0}", criteria);
                    } else if (mapping.get(col).equals(
                            TestCaseImportMapping.REQUIREMENT.getValue())) {
                        //Process requirements
                        String reqs = (String) importedTable.getModel().getValueAt(row, col);
                        StringTokenizer st = new StringTokenizer(reqs,
                                delimiter.getSelectedItem().toString());
                        while (st.hasMoreTokens()) {
                            String token = st.nextToken().trim();
                            LOG.log(Level.FINE, "Requirement: {0}", token);
                            boolean found = false;
                            for (Project p : projects) {
                                LOG.log(Level.FINE, 
                                        "Looking on project: {0}", p.getName());
                                for (Requirement r : ProjectServer.getRequirements(p)) {
                                    if (r.getUniqueId().trim().equals(token.trim())) {
                                        requirements.add(r);
                                        found = true;
                                        break;
                                    }
                                }
                            }
                            if (!found) {
                                //TODO: Create dummy? Error out?
                                LOG.log(Level.WARNING, 
                                        "Unable to find requirement: {0}", 
                                        token.trim());
                            }
                        }
                    } else {
                        throw new RuntimeException(MessageFormat.format(
                                "Unhandled mapping: {0}", mapping.get(col)));
                    }
                }
            }
            try {
                step_counter++;
                tcs.addStep(step_counter, description, notes, criteria, 
                        requirements);
                tcs.write2DB();
            } catch (NonexistentEntityException ex) {
                Exceptions.printStackTrace(ex);
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }

    protected void save() {
        LOG.info("Saving imported table...");
        setImportSuccess(true);
        int rows = getImportTable().getModel().getRowCount();
        List<String> mapping = new ArrayList<>(rows);
        for (int i = 0; i < getImportTable().getModel().getColumnCount(); i++) {
            DefaultCellEditor editor
                    = (DefaultCellEditor) getImportTable().getCellEditor(0, i);
            JComboBox combo = (JComboBox) editor.getComponent();
            LOG.log(Level.FINE, "Column {0} is mapped as: {1}",
                    new Object[]{i, combo.getSelectedItem()});
            String value = (String) combo.getSelectedItem();
            //Make sure there's no duplicate mapping
            if (!mapping.isEmpty()
                    && (!value.equals(TestCaseImportMapping.IGNORE.getValue())
                    && mapping.contains(value))) {
                showImportError(MessageFormat.format(
                        "Duplicated mapping: {0}", value));
            }
            mapping.add(i, value);
        }
        //Make sure the basics are mapped
        for (TestCaseImportMapping tim : TestCaseImportMapping.values()) {
            if (tim.isRequired() && !mapping.contains(tim.getValue())) {
                showImportError(MessageFormat.format(
                        "Missing required mapping: {0}", tim.getValue()));
                setImportSuccess(false);
                break;
            }
        }
        //Create the test case to import into
        /* Create and display the dialog */
        if (isImportSuccess()) {
            setDialog(new EditTestCaseDialog(new javax.swing.JFrame(),
                    true, false));
            getDialog().setLocationRelativeTo(null);
            ((EditTestCaseDialog) getDialog()).setTest(test);
            getDialog().addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    getDialog().dispose();
                }
            });
            getDialog().setVisible(true);
            while (getDialog().isVisible()) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
            tc = ((EditTestCaseDialog) getDialog()).getTestCase();
            if (tc == null) {
                showImportError("Test Case Creation unsuccessful!");
                setImportSuccess(false);
            }
        }
        if (isImportSuccess()) {
            process(mapping);
        }
        if (isImportSuccess()
                && tables.size()
                == ((int) Math.round(Double.valueOf(spinner.getValue().toString())))) {
            this.close();
        }
    }
}
