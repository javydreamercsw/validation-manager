package net.sourceforge.javydreamercsw.client.ui.components.test.importer;

import com.validation.manager.core.tool.msword.importer.TableExtractor;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import net.sourceforge.javydreamercsw.client.ui.nodes.TestPlanNode;
import net.sourceforge.javydreamercsw.client.ui.nodes.capability.ImportCapability;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//net.sourceforge.javydreamercsw.client.ui.components//TestImport//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TestImportTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "net.sourceforge.javydreamercsw.client.ui.components.TestImportTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TestImportAction",
        preferredID = "TestImportTopComponent"
)
@Messages({
    "CTL_TestImportAction=Test Import",
    "CTL_TestImportTopComponent=Test Import Window",
    "HINT_TestImportTopComponent=This is a Test Import window"
})
public final class TestImportTopComponent extends TopComponent
        implements LookupListener {

    private final List<XWPFTable> tables = new ArrayList<XWPFTable>();
    private static final Logger LOG
            = Logger.getLogger(TestImportTopComponent.class.getSimpleName());
    private final Lookup.Result<ImportCapability> result
            = Utilities.actionsGlobalContext().lookupResult(ImportCapability.class);

    public TestImportTopComponent() {
        initComponents();
        spinner.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                LOG.log(Level.INFO, "Value changed to: {0}", spinner.getValue());
                displayTable((int) Math.round(Double.valueOf(
                        spinner.getValue().toString())));
            }
        });
        setName(Bundle.CTL_TestImportTopComponent());
        setToolTipText(Bundle.HINT_TestImportTopComponent());
        enableUI(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        spinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        importedTable = new javax.swing.JTable();
        importButton = new javax.swing.JButton();
        header = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(TestImportTopComponent.class, "TestImportTopComponent.jLabel1.text")); // NOI18N

        spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        spinner.setEnabled(false);

        importedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(importedTable);

        org.openide.awt.Mnemonics.setLocalizedText(importButton, org.openide.util.NbBundle.getMessage(TestImportTopComponent.class, "TestImportTopComponent.importButton.text")); // NOI18N
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(header, org.openide.util.NbBundle.getMessage(TestImportTopComponent.class, "TestImportTopComponent.header.text")); // NOI18N
        header.setEnabled(false);
        header.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(saveButton, org.openide.util.NbBundle.getMessage(TestImportTopComponent.class, "TestImportTopComponent.saveButton.text_1")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(importButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)
                        .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(header))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(importButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(header))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JFileChooser fc = new JFileChooser();
                boolean valid = false;
                int returnVal = fc.showOpenDialog(new JFrame());
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = fc.getSelectedFile();
                    TableExtractor te = new TableExtractor(file);
                    try {
                        tables.clear();
                        tables.addAll(te.extractTables());
                        if (tables.size() > 0) {
                            double max = Double.valueOf("" + tables.size());
                            spinner.setModel(new SpinnerNumberModel(1.0, 1.0,
                                    max, 1.0));
                            spinner.setValue(1.0);
                            LOG.log(Level.INFO, "Loaded {0} tables!", tables.size());
                            valid = true;
                            displayTable(1);
                        } else {
                            LOG.log(Level.INFO, "Found no tables!");
                        }
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
                enableUI(valid);
            }
        });
    }//GEN-LAST:event_importButtonActionPerformed

    private void headerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerActionPerformed
        displayTable((int) Math.round(Double.valueOf(spinner.getValue().toString())));
    }//GEN-LAST:event_headerActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        LOG.info("Saving imported table...");
        int rows = importedTable.getModel().getRowCount();
        String[] mapping = new String[rows];
        for (int i = 0; i < importedTable.getModel().getColumnCount(); i++) {
            DefaultCellEditor editor = (DefaultCellEditor) importedTable.getCellEditor(0, i);
            JComboBox combo = (JComboBox) editor.getComponent();
            LOG.log(Level.INFO, "Column {0} is mapped as: {1}",
                    new Object[]{i, combo.getSelectedItem()});
            mapping[i] = (String) combo.getSelectedItem();
        }
        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                final CreateTestDialog dialog
//                        = new CreateTestDialog(new javax.swing.JFrame(), true);
//                dialog.setLocationRelativeTo(null);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        dialog.dispose();
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
    }//GEN-LAST:event_saveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox header;
    private javax.swing.JButton importButton;
    private javax.swing.JTable importedTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JSpinner spinner;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void displayTable(Integer index) {
        LOG.log(Level.FINE, "Changed value to: {0}", index);
        //Build the table
        XWPFTable table = tables.get(index - 1);
        int rows = table.getNumberOfRows() + 1;//Add one for the mapping row
        if (header.isSelected()) {
            rows--;
        }
        int columns = table.getRow(0).getTableCells().size();
        Object[][] data = new Object[rows][columns];
        String[] title = new String[columns];
        for (int i = 0; i < columns; i++) {
            title[i] = "Column " + (i + 1);
        }
        //Row 0 for mapping field
        int rowNum = 1;
        int columnNum;
        final List<TableCellEditor> editors = new ArrayList<TableCellEditor>();
        //Fill maping field
        for (int i = 0; i < columns; i++) {
            data[0][i] = "Select Mapping";
            editors.add(new CustomEditor());
        }
        for (XWPFTableRow row : table.getRows()) {
            columnNum = 0;
            for (XWPFTableCell cell : row.getTableCells()) {
                if (header.isSelected() && rowNum == 1) {
                    title[columnNum] = cell.getText();
                } else {
                    data[header.isSelected() ? rowNum - 1
                            : rowNum][columnNum] = cell.getText();
                }
                columnNum++;
            }
            rowNum++;
        }
        //Rebuild the table model to fit this table
        DefaultTableModel model = new DefaultTableModel(data, title);
        importedTable = new JTable(model) {
            //  Determine editor to be used by row
            @Override
            public TableCellEditor getCellEditor(int row, int column) {
                int modelColumn = convertColumnIndexToModel(column);
                if (row == 0) {
                    return (TableCellEditor) editors.get(column);
                } else {
                    return super.getCellEditor(row, column);
                }
            }
        };
        jScrollPane1.setViewportView(importedTable);
    }

    class CustomEditor extends DefaultCellEditor {

        private final JComboBox cb;

        public CustomEditor() {
            super(new JComboBox());
            cb = (JComboBox) super.getComponent();
            for (TestImportMapping tim : TestImportMapping.values()) {
                cb.addItem(tim.getValue());
            }
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            return row == 0 ? cb
                    : super.getTableCellEditorComponent(table,
                            value, isSelected, row, column);
        }
    }

    private void enableUI(boolean valid) {
        spinner.setEnabled(valid);
        header.setEnabled(valid);
        importedTable.setEnabled(valid);
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends ImportCapability> results = result.allInstances();
        if (!results.isEmpty()) {
            updateUI(results.toArray()[0]);
        }
    }

    private void updateUI(Object object) {
        if (object instanceof TestPlanNode) {
            enableUI(true);
        } else {
            enableUI(false);
        }
    }
}
