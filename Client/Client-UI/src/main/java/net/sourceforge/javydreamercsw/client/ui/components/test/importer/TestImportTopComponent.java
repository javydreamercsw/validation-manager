package net.sourceforge.javydreamercsw.client.ui.components.test.importer;

import com.validation.manager.core.db.Test;
import com.validation.manager.core.db.TestCase;
import com.validation.manager.core.db.TestPlan;
import com.validation.manager.core.db.TestProject;
import com.validation.manager.core.tool.table.extractor.TableExtractor;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import net.sourceforge.javydreamercsw.client.ui.components.testcase.importer.TestCaseImportMapping;
import net.sourceforge.javydreamercsw.client.ui.components.testcase.importer.TestCaseImporterTopComponent;
import net.sourceforge.javydreamercsw.client.ui.nodes.actions.CreateTestDialog;
import net.sourceforge.javydreamercsw.client.ui.nodes.actions.EditTestCaseDialog;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//net.sourceforge.javydreamercsw.client.ui.components//TestImport//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TestImportTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window",
        id = "net.sourceforge.javydreamercsw.client.ui.components.TestImportTopComponent")
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TestImportAction",
        preferredID = "TestImportTopComponent"
)
@Messages({
    "CTL_TestImportAction=Test Import",
    "CTL_TestImportTopComponent=Test Import Window",
    "HINT_TestImportTopComponent=This is a Test Import window",
    "TestImportTopComponent.addDelimiterButton.text_1=Add Delimiter",
    "test.import.button=Import Test",
    "TestImportTopComponent.jLabel1.text=Index",
    "TestImportTopComponent.header.text=Data has headers?",
    "TestImportTopComponent.saveButton.text_1=Save",
    "TestImportTopComponent.jLabel2.text=Select Delimiter"
})
public class TestImportTopComponent extends TestCaseImporterTopComponent {

    private static final Logger LOG
            = Logger.getLogger(TestImportTopComponent.class.getSimpleName());
    private Test test;
    private TestCase tc;
    private TestPlan tp;

    public TestImportTopComponent() {
        super();
        setName(Bundle.CTL_TestImportTopComponent());
        setToolTipText(Bundle.HINT_TestImportTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        spinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        importedTable = new javax.swing.JTable();
        importButton = new javax.swing.JButton();
        header = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();
        delimiter = new JComboBox(model);
        jLabel2 = new javax.swing.JLabel();
        delimiterField = new javax.swing.JTextField();
        addDelimiterButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(TestImportTopComponent.class, "TestImportTopComponent.jLabel1.text")); // NOI18N

        spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));
        spinner.setEnabled(false);

        importedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(importedTable);

        org.openide.awt.Mnemonics.setLocalizedText(importButton, org.openide.util.NbBundle.getMessage(TestImportTopComponent.class, "test.import.button")); // NOI18N
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(header, org.openide.util.NbBundle.getMessage(TestImportTopComponent.class, "TestImportTopComponent.header.text")); // NOI18N
        header.setEnabled(false);
        header.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(saveButton, org.openide.util.NbBundle.getMessage(TestImportTopComponent.class, "TestImportTopComponent.saveButton.text_1")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        delimiter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ",", ";", " " }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(TestImportTopComponent.class, "TestImportTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(addDelimiterButton, org.openide.util.NbBundle.getMessage(TestImportTopComponent.class, "TestImportTopComponent.addDelimiterButton.text_1")); // NOI18N
        addDelimiterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDelimiterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)
                        .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(header))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(importButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(addDelimiterButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delimiterField, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(3, 3, 3)
                                    .addComponent(delimiter, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delimiterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDelimiterButton))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delimiter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(importButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(header))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JFileChooser fc = new JFileChooser();
                boolean valid = false;
                fc.setFileFilter(new FileFilter() {

                    @Override
                    public boolean accept(File f) {
                        return f.isDirectory()
                                || (f.isFile()
                                && (f.getName().endsWith(".xls")
                                || f.getName().endsWith(".xlsx")
                                || f.getName().endsWith(".xlsm")
                                || f.getName().endsWith(".doc")
                                || f.getName().endsWith(".docx")));
                    }

                    @Override
                    public String getDescription() {
                        return "Validation manager Test Import Files";
                    }
                });
                int returnVal = fc.showOpenDialog(new JFrame());
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = fc.getSelectedFile();
                    TableExtractor te = new TableExtractor(file);
                    try {
                        tables.clear();
                        tables.addAll(te.extractTables());
                        if (tables.size() > 0) {
                            double max = Double.valueOf("" + tables.size());
                            spinner.setModel(new SpinnerNumberModel(1.0, 1.0,
                                    max, 1.0));
                            spinner.setValue(1.0);
                            LOG.log(Level.INFO, "Loaded {0} tables!",
                                    tables.size());
                            valid = true;
                            displayTable(1);
                        } else {
                            LOG.log(Level.INFO, "Found no tables!");
                        }
                        for (DefaultTableModel dtm : tables) {
                            int columns = dtm.getColumnCount();
                            Object[] mappingRow = new Object[columns];
                            for (int i = 0; i < columns; i++) {
                                //Mapping row
                                mappingRow[i] = "Select Mapping";
                            }
                            //Insert mapping row
                            dtm.insertRow(0, mappingRow);
                        }
                    } catch (FileNotFoundException ex) {
                        Exceptions.printStackTrace(ex);
                    } catch (ClassNotFoundException | IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
                enableUI(valid);
            }
        });
    }//GEN-LAST:event_importButtonActionPerformed

    private void headerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerActionPerformed
        handleHeaderActionPerformed();
    }//GEN-LAST:event_headerActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        LOG.info("Saving imported table...");
        setImportSuccess(true);
        TestProject testProject = tp.getTestProject();
        int rows = importedTable.getModel().getRowCount();
        List<String> mapping = new ArrayList<>(rows);
        for (int i = 0; i < importedTable.getModel().getColumnCount(); i++) {
            DefaultCellEditor editor
                    = (DefaultCellEditor) importedTable.getCellEditor(0, i);
            JComboBox combo = (JComboBox) editor.getComponent();
            LOG.log(Level.INFO, "Column {0} is mapped as: {1}",
                    new Object[]{i, combo.getSelectedItem()});
            String value = (String) combo.getSelectedItem();
            //Make sure there's no duplicate mapping
            if (!mapping.isEmpty()
                    && (!value.equals(TestCaseImportMapping.IGNORE.getValue())//Ignore the ignore mapping.
                    && mapping.contains(value))) {
                showImportError(
                        MessageFormat.format("Duplicated mapping: {0}", value));
            }
            mapping.add(i, value);
        }
        //Make sure the basics are mapped
        for (TestCaseImportMapping tim : TestCaseImportMapping.values()) {
            if (tim.isRequired() && !mapping.contains(tim.getValue())) {
                showImportError(
                        MessageFormat.format("Missing required mapping: {0}",
                                tim.getValue()));
                setImportSuccess(false);
                break;
            }
        }
        /* Create and display the dialog */
        if (isImportSuccess()) {
            setDialog(new CreateTestDialog(new javax.swing.JFrame(), true));
            getDialog().setLocationRelativeTo(null);
            getDialog().addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    getDialog().dispose();
                    setDialog(null);
                }
            });
            ((CreateTestDialog) getDialog()).setTestPlan(tp);
            getDialog().setVisible(true);
            test = ((CreateTestDialog) getDialog()).getTest();
            if (test == null) {
                showImportError("Test Creation unsuccessful!");
                setImportSuccess(false);
            }
            while (getDialog() == null || getDialog().isVisible()) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
        //Create the test case to import into
        /* Create and display the dialog */
        if (isImportSuccess()) {
            setDialog(new EditTestCaseDialog(new javax.swing.JFrame(),
                    true, false));
            getDialog().setLocationRelativeTo(null);
            ((EditTestCaseDialog) getDialog()).setTest(test);
            getDialog().addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    tc = ((EditTestCaseDialog) getDialog()).getTestCase();
                    if (tc == null) {
                        showImportError("Test Case Creation unsuccessful!");
                        setImportSuccess(false);
                    }
                    getDialog().dispose();
                }
            });
            getDialog().setVisible(true);
            while (getDialog().isVisible()) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
            tc = ((EditTestCaseDialog) getDialog()).getTestCase();
            if (tc == null) {
                showImportError("Test Case Creation unsuccessful!");
                setImportSuccess(false);
            }
        }
        if (isImportSuccess()) {
            process(mapping);
        }
        if (isImportSuccess()) {
            this.close();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void addDelimiterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDelimiterButtonActionPerformed
        handleAddDelimiterButtonActionPerformed();
    }//GEN-LAST:event_addDelimiterButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDelimiterButton;
    private javax.swing.JComboBox delimiter;
    private javax.swing.JTextField delimiterField;
    private javax.swing.JCheckBox header;
    private javax.swing.JButton importButton;
    private javax.swing.JTable importedTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JSpinner spinner;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        enableUI(false);
        tables.clear();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    /**
     * @param tp the TestPlan to set
     */
    public void setTestPlan(TestPlan tp) {
        this.tp = tp;
    }

    @Override
    public void init() {
        initComponents();
    }

    @Override
    public DefaultCellEditor getEditor() {
        return new TestImportEditor();
    }

    @Override
    public JTextField getDelimetterField() {
        return delimiterField;
    }

    @Override
    public JCheckBox getHeaderCheckbox() {
        return header;
    }

    @Override
    public JScrollPane getScrollPane() {
        return jScrollPane1;
    }

    @Override
    public void setImportTable(JTable table) {
        importedTable = table;
    }

    @Override
    public JTable getImportTable() {
        return importedTable;
    }

    @Override
    public JSpinner getSpinner() {
        return spinner;
    }

    @Override
    public JComboBox getDelimiter() {
        return delimiter;
    }

    @Override
    public void setModel(DefaultComboBoxModel model) {
        this.model = model;
    }

    @Override
    public DefaultComboBoxModel getModel() {
        return model;
    }

    @Override
    public JButton getSaveButton() {
        return saveButton;
    }
}
